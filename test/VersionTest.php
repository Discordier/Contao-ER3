<?php
/**
 * Testcase for Version class
 *
 * This file is part of the Contao rfccc-1 <https://github.com/Discordier/Contao-ER3>
 * This file is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License <http://creativecommons.org/licenses/by-sa/3.0/legalcode>
 *
 * @author Tristan Lins <tristan.lins@infinitysoft.de>
*/

require_once __DIR__ . '/../src/Version.php';

/**
 * Test class for Version.
 * Generated by PHPUnit on 2011-11-05 at 13:23:48.
 */
class VersionTest extends PHPUnit_Framework_TestCase
{
	/**
	 * Version 0.1.2.3
	 *
	 * @var Version
	 */
	protected $version0_1_2_3;

	/**
	 * Version 1.2.3.4
	 *
	 * @var Version
	 */
	protected $version1_2_3_4;

	/**
	 * Version 2.3.4.5
	 *
	 * @var Version
	 */
	protected $version2_3_4_5;

	/**
	 * Version 2.2.3.4
	 *
	 * @var Version
	 */
	protected $version2_2_3_4;

	/**
	 * Version 1.3.3.4
	 *
	 * @var Version
	 */
	protected $version1_3_3_4;

	/**
	 * Version 1.2.4.4
	 *
	 * @var Version
	 */
	protected $version1_2_4_4;

	/**
	 * Version 1.2.3.5
	 *
	 * @var Version
	 */
	protected $version1_2_3_5;

	/**
	 * Version 1.2.3.head4
	 *
	 * @var Version
	 */
	protected $version1_2_3_head4;

	/**
	 * Version 1.2.3.alpha4
	 *
	 * @var Version
	 */
	protected $version1_2_3_alpha4;

	/**
	 * Version 1.2.3.beta4
	 *
	 * @var Version
	 */
	protected $version1_2_3_beta4;

	/**
	 * Version 1.2.3.rc4
	 *
	 * @var Version
	 */
	protected $version1_2_3_rc4;

	/**
	 * Version 1.2.3.stable4
	 *
	 * @var Version
	 */
	protected $version1_2_3_stable4;

	/**
	 * Version 0.1.2-acme.3
	 *
	 * @var Version
	 */
	protected $version0_1_2_acme_3;

	/**
	 * Version 1.2.3-acme.4
	 *
	 * @var Version
	 */
	protected $version1_2_3_acme_4;

	/**
	 * Version 1.2.3-acme.4
	 *
	 * @var Version
	 */
	protected $version2_3_4_acme_5;

	/**
	 * Version 2.2.3-acme.4
	 *
	 * @var Version
	 */
	protected $version2_2_3_acme_4;

	/**
	 * Version 1.3.3-acme.4
	 *
	 * @var Version
	 */
	protected $version1_3_3_acme_4;

	/**
	 * Version 1.2.4-acme.4
	 *
	 * @var Version
	 */
	protected $version1_2_4_acme_4;

	/**
	 * Version 1.2.3-acme.5
	 *
	 * @var Version
	 */
	protected $version1_2_3_acme_5;

	/**
	 * Version 1.2.3-acme2.4
	 *
	 * @var Version
	 */
	protected $version1_2_3_acme2_4;

	/**
	 * Version 1.2.3.head4
	 *
	 * @var Version
	 */
	protected $version1_2_3_acme_head4;

	/**
	 * Version 1.2.3.alpha4
	 *
	 * @var Version
	 */
	protected $version1_2_3_acme_alpha4;

	/**
	 * Version 1.2.3.beta4
	 *
	 * @var Version
	 */
	protected $version1_2_3_acme_beta4;

	/**
	 * Version 1.2.3.rc4
	 *
	 * @var Version
	 */
	protected $version1_2_3_acme_rc4;

	/**
	 * Version 1.2.3.stable4
	 *
	 * @var Version
	 */
	protected $version1_2_3_acme_stable4;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->version0_1_2_3 = new Version('0.1.2.3');
		$this->version1_2_3_4 = new Version('1.2.3.4');
		$this->version2_3_4_5 = new Version(2, 3, 4, 5);
		$this->version2_2_3_4 = new Version(2, 2, 3, 4);
		$this->version1_3_3_4 = new Version(1, 3, 3, 4);
		$this->version1_2_4_4 = new Version(1, 2, 4, 4);
		$this->version1_2_3_5 = new Version(1, 2, 3, 5);
		$this->version1_2_3_head4 = new Version('1.2.3.head4');
		$this->version1_2_3_alpha4 = new Version('1.2.3.alpha.4');
		$this->version1_2_3_beta4 = new Version(1, 2, 3, 'beta', 4);
		$this->version1_2_3_rc4 = new Version(1, 2, 3, 'rc', 4);
		$this->version1_2_3_stable4 = new Version(1, 2, 3, 'stable', 4);
		$this->version0_1_2_acme_3 = new Version('0.1.2-acme1.3');
		$this->version1_2_3_acme_4 = new Version('1.2.3-acme.4');
		$this->version2_3_4_acme_5 = new Version('2.3.4-acme.5');
		$this->version2_2_3_acme_4 = new Version(2, 2, 3, 'acme', 4);
		$this->version1_3_3_acme_4 = new Version(1, 3, 3, 'acme', 4);
		$this->version1_2_4_acme_4 = new Version(1, 2, 4, 'acme', 4);
		$this->version1_2_3_acme_5 = new Version(1, 2, 3, 'acme', 5);
		$this->version1_2_3_acme2_4 = new Version(1, 2, 3, 'acme2', 4);
		$this->version1_2_3_acme_head4 = new Version('1.2.3-acme.head4');
		$this->version1_2_3_acme_alpha4 = new Version('1.2.3-acme.alpha.4');
		$this->version1_2_3_acme_beta4 = new Version(1, 2, 3, 'acme', 'beta', 4);
		$this->version1_2_3_acme_rc4 = new Version(1, 2, 3, 'acme', 'rc', 4);
		$this->version1_2_3_acme_stable4 = new Version(1, 2, 3, 'acme', 'stable', 4);

	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * Test Version::compare
	 */
	public function testCompare()
	{
		/*** Test without extension ***************************************** */

		// compare against 0
		// 1.2.3.4 == 1.2.3.4
		$this->assertEquals(0,      $this->version1_2_3_4->compare(new Version($this->version1_2_3_4)));

		// 1.2.3.4 < 2.2.3.4
		$this->assertLessThan(0,    $this->version1_2_3_4->compare($this->version2_2_3_4));
		// 1.2.3.4 > 0.1.2.3
		$this->assertGreaterThan(0, $this->version1_2_3_4->compare($this->version0_1_2_3));
		// 0.1.2.3 < 1.2.3.4
		$this->assertLessThan(0,    $this->version0_1_2_3->compare($this->version1_2_3_4));
		// 2.3.4.5 > 1.2.3.4
		$this->assertGreaterThan(0, $this->version2_3_4_5->compare($this->version1_2_3_4));

		// compare each component
		// 1.2.3.4 < 2.2.3.4 = -10000000000
		$this->assertEquals(-10000000000, $this->version1_2_3_4->compare($this->version2_2_3_4));
		// 1.2.3.4 < 1.3.3.4 = -100000000
		$this->assertEquals(-100000000,   $this->version1_2_3_4->compare($this->version1_3_3_4));
		// 1.2.3.4 < 1.2.4.4 = -1000000
		$this->assertEquals(-1000000,     $this->version1_2_3_4->compare($this->version1_2_4_4));
		// 1.2.3.4 < 1.2.3.5 = -1
		$this->assertEquals(-1,           $this->version1_2_3_4->compare($this->version1_2_3_5));
		// 2.2.3.4 > 1.2.3.4 = 10000000000
		$this->assertEquals(10000000000, $this->version2_2_3_4->compare($this->version1_2_3_4));
		// 1.3.3.4 > 1.2.3.4 = 100000000
		$this->assertEquals(100000000,   $this->version1_3_3_4->compare($this->version1_2_3_4));
		// 1.2.4.4 > 1.2.3.4 = 1000000
		$this->assertEquals(1000000,     $this->version1_2_4_4->compare($this->version1_2_3_4));
		// 1.2.3.4 > 1.2.3.4 = 1
		$this->assertEquals(1,           $this->version1_2_3_5->compare($this->version1_2_3_4));

		// compare different releases
		// 1.2.3.4 > 1.2.3.head.4 = 400
		$this->assertEquals(400, $this->version1_2_3_4->compare($this->version1_2_3_head4));
		// 1.2.3.4 > 1.2.3.alpha.4 = 300
		$this->assertEquals(300, $this->version1_2_3_4->compare($this->version1_2_3_alpha4));
		// 1.2.3.4 > 1.2.3.beta.4 = 200
		$this->assertEquals(200, $this->version1_2_3_4->compare($this->version1_2_3_beta4));
		// 1.2.3.4 > 1.2.3.rc.4 = 100
		$this->assertEquals(100, $this->version1_2_3_4->compare($this->version1_2_3_rc4));
		// 1.2.3.4 == 1.2.3.stable.4 = 0
		$this->assertEquals(0,   $this->version1_2_3_4->compare($this->version1_2_3_stable4));

		// 1.2.3.head.4 < 1.2.3.4 = -400
		$this->assertEquals(-400, $this->version1_2_3_head4  ->compare($this->version1_2_3_4));
		// 1.2.3.alpha.4 < 1.2.3.4 = -300
		$this->assertEquals(-300, $this->version1_2_3_alpha4 ->compare($this->version1_2_3_4));
		// 1.2.3.beta.4 < 1.2.3.4 = -200
		$this->assertEquals(-200, $this->version1_2_3_beta4  ->compare($this->version1_2_3_4));
		// 1.2.3.rc.4 < 1.2.3.4 = -100
		$this->assertEquals(-100, $this->version1_2_3_rc4    ->compare($this->version1_2_3_4));
		// 1.2.3.stable.4 == 1.2.3.4 = 0
		$this->assertEquals(0,    $this->version1_2_3_stable4->compare($this->version1_2_3_4));

		/*** Test with extension ******************************************** */

		// compare against 0
		// 1.2.3-acme.4 == 1.2.3-acme.4
		$this->assertEquals(0,      $this->version1_2_3_acme_4->compare(new Version($this->version1_2_3_acme_4)));

		// 1.2.3-acme.4 < 2.2.3-acme.4
		$this->assertLessThan(0,    $this->version1_2_3_acme_4->compare($this->version2_2_3_acme_4));
		// 1.2.3-acme.4 > 0.1.2-acme.3
		$this->assertGreaterThan(0, $this->version1_2_3_acme_4->compare($this->version0_1_2_acme_3));
		// 0.1.2-acme.3 < 1.2.3-acme.4
		$this->assertLessThan(0,    $this->version0_1_2_acme_3->compare($this->version1_2_3_acme_4));
		// 2.3.4-acme.5 > 1.2.3-acme.4
		$this->assertGreaterThan(0, $this->version2_3_4_acme_5->compare($this->version1_2_3_acme_4));

		// compare each component
		// 1.2.3-acme.4 < 2.2.3-acme.4 = -10000000000
		$this->assertEquals(-10000000000, $this->version1_2_3_acme_4->compare($this->version2_2_3_acme_4));
		// 1.2.3-acme.4 < 1.3.3-acme.4 = -100000000
		$this->assertEquals(-100000000,   $this->version1_2_3_acme_4->compare($this->version1_3_3_acme_4));
		// 1.2.3-acme.4 < 1.2.4-acme.4 = -1000000
		$this->assertEquals(-1000000,     $this->version1_2_3_acme_4->compare($this->version1_2_4_acme_4));
		// 1.2.3-acme.4 < 1.2.3-acme.5 = -1
		$this->assertEquals(-1,           $this->version1_2_3_acme_4->compare($this->version1_2_3_acme_5));
		// 2.2.3-acme.4 > 1.2.3-acme.4 = 10000000000
		$this->assertEquals(10000000000, $this->version2_2_3_acme_4->compare($this->version1_2_3_acme_4));
		// 1.3.3-acme.4 > 1.2.3-acme.4 = 100000000
		$this->assertEquals(100000000,   $this->version1_3_3_acme_4->compare($this->version1_2_3_acme_4));
		// 1.2.4-acme.4 > 1.2.3-acme.4 = 1000000
		$this->assertEquals(1000000,     $this->version1_2_4_acme_4->compare($this->version1_2_3_acme_4));
		// 1.2.3-acme.4 > 1.2.3-acme.4 = 1
		$this->assertEquals(1,           $this->version1_2_3_acme_5->compare($this->version1_2_3_acme_4));

		// compare extensions
		// 1.2.3-acme2.4 == 1.2.3-acme2.4
		$this->assertEquals(0,      $this->version1_2_3_acme2_4->compare($this->version1_2_3_acme2_4));
		// 1.2.3-acme.4 < 1.2.3-acme2.4
		$this->assertEquals(-10000, $this->version1_2_3_acme_4->compare($this->version1_2_3_acme2_4));
		// 1.2.3-acme2.4 > 1.2.3-acme.4
		$this->assertEquals(10000,  $this->version1_2_3_acme2_4->compare($this->version1_2_3_acme_4));

		// compare different releases
		// 1.2.3-acme.4 > 1.2.3-acme.head.4 = 400
		$this->assertEquals(400, $this->version1_2_3_acme_4->compare($this->version1_2_3_acme_head4));
		// 1.2.3-acme.4 > 1.2.3-acme.alpha.4 = 300
		$this->assertEquals(300, $this->version1_2_3_acme_4->compare($this->version1_2_3_acme_alpha4));
		// 1.2.3-acme.4 > 1.2.3-acme.beta.4 = 200
		$this->assertEquals(200, $this->version1_2_3_acme_4->compare($this->version1_2_3_acme_beta4));
		// 1.2.3-acme.4 > 1.2.3-acme.rc.4 = 100
		$this->assertEquals(100, $this->version1_2_3_acme_4->compare($this->version1_2_3_acme_rc4));
		// 1.2.3-acme.4 == 1.2.3-acme.stable.4 = 0
		$this->assertEquals(0,   $this->version1_2_3_acme_4->compare($this->version1_2_3_acme_stable4));

		// 1.2.3-acme.head.4 < 1.2.3-acme.4 = -400
		$this->assertEquals(-400, $this->version1_2_3_acme_head4  ->compare($this->version1_2_3_acme_4));
		// 1.2.3-acme.alpha.4 < 1.2.3-acme.4 = -300
		$this->assertEquals(-300, $this->version1_2_3_acme_alpha4 ->compare($this->version1_2_3_acme_4));
		// 1.2.3-acme.beta.4 < 1.2.3-acme.4 = -200
		$this->assertEquals(-200, $this->version1_2_3_acme_beta4  ->compare($this->version1_2_3_acme_4));
		// 1.2.3-acme.rc.4 < 1.2.3-acme.4 = -100
		$this->assertEquals(-100, $this->version1_2_3_acme_rc4    ->compare($this->version1_2_3_acme_4));
		// 1.2.3-acme.stable.4 == 1.2.3-acme.4 = 0
		$this->assertEquals(0,    $this->version1_2_3_acme_stable4->compare($this->version1_2_3_acme_4));

		/*** Test with and without extension ******************************** */

		// incompatible versions
		// 1.2.3.4 != 1.2.3-acme.4
		try {
			$this->version1_2_3_4->compare($this->version1_2_3_acme_4);
			$this->assertTrue(false);
		} catch (IncompatibleVersionException $e) {
			$this->assertTrue(true);
		}
		// 1.2.3-acme.4 != 1.2.3.4
		try {
			$this->version1_2_3_acme_4->compare($this->version1_2_3_4);
			$this->assertTrue(false);
		} catch (IncompatibleVersionException $e) {
			$this->assertTrue(true);
		}
	}

	/**
	 * Test Version::isGreaterThan
	 */
	public function testIsGreaterThan()
	{
		/*** Test without extension ***************************************** */

		// 1.2.3.4 == 1.2.3.4
		$this->assertFalse($this->version1_2_3_4->isGreaterThan(new Version($this->version1_2_3_4)));
		// 1.2.3.4 < 2.2.3.4
		$this->assertFalse($this->version1_2_3_4->isGreaterThan($this->version2_2_3_4));
		// 1.2.3.4 > 0.1.2.3
		$this->assertTrue( $this->version1_2_3_4->isGreaterThan($this->version0_1_2_3));

		// compare different releases
		// 1.2.3.4 > 1.2.3.head.4 = 400
		$this->assertTrue( $this->version1_2_3_4->isGreaterThan($this->version1_2_3_head4));
		// 1.2.3.4 > 1.2.3.alpha.4 = 300
		$this->assertTrue( $this->version1_2_3_4->isGreaterThan($this->version1_2_3_alpha4));
		// 1.2.3.4 > 1.2.3.beta.4 = 200
		$this->assertTrue( $this->version1_2_3_4->isGreaterThan($this->version1_2_3_beta4));
		// 1.2.3.4 > 1.2.3.rc.4 = 100
		$this->assertTrue( $this->version1_2_3_4->isGreaterThan($this->version1_2_3_rc4));
		// 1.2.3.4 == 1.2.3.stable.4 = 0
		$this->assertFalse($this->version1_2_3_4->isGreaterThan($this->version1_2_3_stable4));

		// 1.2.3.head.4 < 1.2.3.4 = -400
		$this->assertFalse($this->version1_2_3_head4  ->isGreaterThan($this->version1_2_3_4));
		// 1.2.3.alpha.4 < 1.2.3.4 = -300
		$this->assertFalse($this->version1_2_3_alpha4 ->isGreaterThan($this->version1_2_3_4));
		// 1.2.3.beta.4 < 1.2.3.4 = -200
		$this->assertFalse($this->version1_2_3_beta4  ->isGreaterThan($this->version1_2_3_4));
		// 1.2.3.rc.4 < 1.2.3.4 = -100
		$this->assertFalse($this->version1_2_3_rc4    ->isGreaterThan($this->version1_2_3_4));
		// 1.2.3.stable.4 == 1.2.3.4 = 0
		$this->assertFalse($this->version1_2_3_stable4->isGreaterThan($this->version1_2_3_4));

		/*** Test with extension ******************************************** */

		// 1.2.3-acme.4 == 1.2.3-acme.4
		$this->assertFalse($this->version1_2_3_acme_4->isGreaterThan(new Version($this->version1_2_3_acme_4)));
		// 1.2.3-acme.4 < 2.2.3-acme.4
		$this->assertFalse($this->version1_2_3_acme_4->isGreaterThan($this->version2_2_3_acme_4));
		// 1.2.3-acme.4 > 0.1.2-acme.3
		$this->assertTrue( $this->version1_2_3_acme_4->isGreaterThan($this->version0_1_2_acme_3));
		// 0.1.2-acme.3 < 1.2.3-acme.4
		$this->assertFalse($this->version0_1_2_acme_3->isGreaterThan($this->version1_2_3_acme_4));
		// 2.3.4-acme.5 > 1.2.3-acme.4
		$this->assertTrue( $this->version2_3_4_acme_5->isGreaterThan($this->version1_2_3_acme_4));

		// compare extensions
		// 1.2.3-acme2.4 == 1.2.3-acme2.4
		$this->assertFalse($this->version1_2_3_acme2_4->isGreaterThan($this->version1_2_3_acme2_4));
		// 1.2.3-acme.4 < 1.2.3-acme2.4
		$this->assertFalse($this->version1_2_3_acme_4 ->isGreaterThan($this->version1_2_3_acme2_4));
		// 1.2.3-acme2.4 > 1.2.3-acme.4
		$this->assertTrue( $this->version1_2_3_acme2_4->isGreaterThan($this->version1_2_3_acme_4));

		// compare different releases
		// 1.2.3-acme.4 > 1.2.3-acme.head.4 = 400
		$this->assertTrue( $this->version1_2_3_acme_4->isGreaterThan($this->version1_2_3_acme_head4));
		// 1.2.3-acme.4 > 1.2.3-acme.alpha.4 = 300
		$this->assertTrue( $this->version1_2_3_acme_4->isGreaterThan($this->version1_2_3_acme_alpha4));
		// 1.2.3-acme.4 > 1.2.3-acme.beta.4 = 200
		$this->assertTrue( $this->version1_2_3_acme_4->isGreaterThan($this->version1_2_3_acme_beta4));
		// 1.2.3-acme.4 > 1.2.3-acme.rc.4 = 100
		$this->assertTrue( $this->version1_2_3_acme_4->isGreaterThan($this->version1_2_3_acme_rc4));
		// 1.2.3-acme.4 == 1.2.3-acme.stable.4 = 0
		$this->assertFalse($this->version1_2_3_acme_4->isGreaterThan($this->version1_2_3_acme_stable4));

		// 1.2.3-acme.head.4 < 1.2.3-acme.4 = -400
		$this->assertFalse($this->version1_2_3_acme_head4  ->isGreaterThan($this->version1_2_3_acme_4));
		// 1.2.3-acme.alpha.4 < 1.2.3-acme.4 = -300
		$this->assertFalse($this->version1_2_3_acme_alpha4 ->isGreaterThan($this->version1_2_3_acme_4));
		// 1.2.3-acme.beta.4 < 1.2.3-acme.4 = -200
		$this->assertFalse($this->version1_2_3_acme_beta4  ->isGreaterThan($this->version1_2_3_acme_4));
		// 1.2.3-acme.rc.4 < 1.2.3-acme.4 = -100
		$this->assertFalse($this->version1_2_3_acme_rc4    ->isGreaterThan($this->version1_2_3_acme_4));
		// 1.2.3-acme.stable.4 == 1.2.3-acme.4 = 0
		$this->assertFalse($this->version1_2_3_acme_stable4->isGreaterThan($this->version1_2_3_acme_4));

		/*** Test with and without extension ******************************** */

		// incompatible versions
		// 1.2.3.4 != 1.2.3-acme.4
		try {
			$this->version1_2_3_4->isGreaterThan($this->version1_2_3_acme_4);
			$this->assertTrue(false);
		} catch (IncompatibleVersionException $e) {
			$this->assertTrue(true);
		}
		// 1.2.3-acme.4 != 1.2.3.4
		try {
			$this->version1_2_3_acme_4->isGreaterThan($this->version1_2_3_4);
			$this->assertTrue(false);
		} catch (IncompatibleVersionException $e) {
			$this->assertTrue(true);
		}
	}

	/**
	 * Test Version::isLessThan
	 */
	public function testIsLessThan()
	{
		/*** Test without extension ***************************************** */

		// 1.2.3.4 == 1.2.3.4
		$this->assertFalse($this->version1_2_3_4->isLessThan(new Version($this->version1_2_3_4)));
		// 1.2.3.4 < 2.2.3.4
		$this->assertTrue( $this->version1_2_3_4->isLessThan($this->version2_2_3_4));
		// 1.2.3.4 > 0.1.2.3
		$this->assertFalse($this->version1_2_3_4->isLessThan($this->version0_1_2_3));

		// compare different releases
		// 1.2.3.4 > 1.2.3.head.4 = 400
		$this->assertFalse($this->version1_2_3_4->isLessThan($this->version1_2_3_head4));
		// 1.2.3.4 > 1.2.3.alpha.4 = 300
		$this->assertFalse($this->version1_2_3_4->isLessThan($this->version1_2_3_alpha4));
		// 1.2.3.4 > 1.2.3.beta.4 = 200
		$this->assertFalse($this->version1_2_3_4->isLessThan($this->version1_2_3_beta4));
		// 1.2.3.4 > 1.2.3.rc.4 = 100
		$this->assertFalse($this->version1_2_3_4->isLessThan($this->version1_2_3_rc4));
		// 1.2.3.4 == 1.2.3.stable.4 = 0
		$this->assertFalse($this->version1_2_3_4->isLessThan($this->version1_2_3_stable4));

		// 1.2.3.head.4 < 1.2.3.4 = -400
		$this->assertTrue( $this->version1_2_3_head4  ->isLessThan($this->version1_2_3_4));
		// 1.2.3.alpha.4 < 1.2.3.4 = -300
		$this->assertTrue( $this->version1_2_3_alpha4 ->isLessThan($this->version1_2_3_4));
		// 1.2.3.beta.4 < 1.2.3.4 = -200
		$this->assertTrue( $this->version1_2_3_beta4  ->isLessThan($this->version1_2_3_4));
		// 1.2.3.rc.4 < 1.2.3.4 = -100
		$this->assertTrue( $this->version1_2_3_rc4    ->isLessThan($this->version1_2_3_4));
		// 1.2.3.stable.4 == 1.2.3.4 = 0
		$this->assertFalse($this->version1_2_3_stable4->isLessThan($this->version1_2_3_4));

		/*** Test with extension ******************************************** */

		// 1.2.3-acme.4 == 1.2.3-acme.4
		$this->assertFalse($this->version1_2_3_acme_4->isLessThan(new Version($this->version1_2_3_acme_4)));
		// 1.2.3-acme.4 < 2.2.3-acme.4
		$this->assertTrue( $this->version1_2_3_acme_4->isLessThan($this->version2_2_3_acme_4));
		// 1.2.3-acme.4 > 0.1.2-acme.3
		$this->assertFalse($this->version1_2_3_acme_4->isLessThan($this->version0_1_2_acme_3));
		// 0.1.2-acme.3 < 1.2.3-acme.4
		$this->assertTrue( $this->version0_1_2_acme_3->isLessThan($this->version1_2_3_acme_4));
		// 2.3.4-acme.5 > 1.2.3-acme.4
		$this->assertFalse($this->version2_3_4_acme_5->isLessThan($this->version1_2_3_acme_4));

		// compare extensions
		// 1.2.3-acme2.4 == 1.2.3-acme2.4
		$this->assertFalse($this->version1_2_3_acme2_4->isLessThan($this->version1_2_3_acme2_4));
		// 1.2.3-acme.4 < 1.2.3-acme2.4
		$this->assertTrue( $this->version1_2_3_acme_4 ->isLessThan($this->version1_2_3_acme2_4));
		// 1.2.3-acme2.4 > 1.2.3-acme.4
		$this->assertFalse($this->version1_2_3_acme2_4->isLessThan($this->version1_2_3_acme_4));

		// compare different releases
		// 1.2.3-acme.4 > 1.2.3-acme.head.4 = 400
		$this->assertFalse($this->version1_2_3_acme_4->isLessThan($this->version1_2_3_acme_head4));
		// 1.2.3-acme.4 > 1.2.3-acme.alpha.4 = 300
		$this->assertFalse($this->version1_2_3_acme_4->isLessThan($this->version1_2_3_acme_alpha4));
		// 1.2.3-acme.4 > 1.2.3-acme.beta.4 = 200
		$this->assertFalse($this->version1_2_3_acme_4->isLessThan($this->version1_2_3_acme_beta4));
		// 1.2.3-acme.4 > 1.2.3-acme.rc.4 = 100
		$this->assertFalse($this->version1_2_3_acme_4->isLessThan($this->version1_2_3_acme_rc4));
		// 1.2.3-acme.4 == 1.2.3-acme.stable.4 = 0
		$this->assertFalse($this->version1_2_3_acme_4->isLessThan($this->version1_2_3_acme_stable4));

		// 1.2.3-acme.head.4 < 1.2.3-acme.4 = -400
		$this->assertTrue( $this->version1_2_3_acme_head4  ->isLessThan($this->version1_2_3_acme_4));
		// 1.2.3-acme.alpha.4 < 1.2.3-acme.4 = -300
		$this->assertTrue( $this->version1_2_3_acme_alpha4 ->isLessThan($this->version1_2_3_acme_4));
		// 1.2.3-acme.beta.4 < 1.2.3-acme.4 = -200
		$this->assertTrue( $this->version1_2_3_acme_beta4  ->isLessThan($this->version1_2_3_acme_4));
		// 1.2.3-acme.rc.4 < 1.2.3-acme.4 = -100
		$this->assertTrue( $this->version1_2_3_acme_rc4    ->isLessThan($this->version1_2_3_acme_4));
		// 1.2.3-acme.stable.4 == 1.2.3-acme.4 = 0
		$this->assertFalse($this->version1_2_3_acme_stable4->isLessThan($this->version1_2_3_acme_4));

		/*** Test with and without extension ******************************** */

		// incompatible versions
		// 1.2.3.4 != 1.2.3-acme.4
		try {
			$this->version1_2_3_4->isLessThan($this->version1_2_3_acme_4);
			$this->assertTrue(false);
		} catch (IncompatibleVersionException $e) {
			$this->assertTrue(true);
		}
		// 1.2.3-acme.4 != 1.2.3.4
		try {
			$this->version1_2_3_acme_4->isLessThan($this->version1_2_3_4);
			$this->assertTrue(false);
		} catch (IncompatibleVersionException $e) {
			$this->assertTrue(true);
		}
	}

	/**
	 * Test Version::equals
	 */
	public function testEquals()
	{
		/*** Test without extension ***************************************** */

		// 1.2.3.4 == 1.2.3.4
		$this->assertTrue( $this->version1_2_3_4->equals(new Version($this->version1_2_3_4)));
		// 1.2.3.4 < 2.2.3.4
		$this->assertFalse($this->version1_2_3_4->equals($this->version2_2_3_4));
		// 1.2.3.4 > 0.1.2.3
		$this->assertFalse($this->version1_2_3_4->equals($this->version0_1_2_3));

		// compare different releases
		// 1.2.3.4 > 1.2.3.head.4 = 400
		$this->assertFalse($this->version1_2_3_4->equals($this->version1_2_3_head4));
		// 1.2.3.4 > 1.2.3.alpha.4 = 300
		$this->assertFalse($this->version1_2_3_4->equals($this->version1_2_3_alpha4));
		// 1.2.3.4 > 1.2.3.beta.4 = 200
		$this->assertFalse($this->version1_2_3_4->equals($this->version1_2_3_beta4));
		// 1.2.3.4 > 1.2.3.rc.4 = 100
		$this->assertFalse($this->version1_2_3_4->equals($this->version1_2_3_rc4));
		// 1.2.3.4 == 1.2.3.stable.4 = 0
		$this->assertTrue( $this->version1_2_3_4->equals($this->version1_2_3_stable4));

		// 1.2.3.head.4 < 1.2.3.4 = -400
		$this->assertFalse($this->version1_2_3_head4  ->equals($this->version1_2_3_4));
		// 1.2.3.alpha.4 < 1.2.3.4 = -300
		$this->assertFalse($this->version1_2_3_alpha4 ->equals($this->version1_2_3_4));
		// 1.2.3.beta.4 < 1.2.3.4 = -200
		$this->assertFalse($this->version1_2_3_beta4  ->equals($this->version1_2_3_4));
		// 1.2.3.rc.4 < 1.2.3.4 = -100
		$this->assertFalse($this->version1_2_3_rc4    ->equals($this->version1_2_3_4));
		// 1.2.3.stable.4 == 1.2.3.4 = 0
		$this->assertTrue( $this->version1_2_3_stable4->equals($this->version1_2_3_4));

		/*** Test with extension ******************************************** */

		// 1.2.3-acme.4 == 1.2.3-acme.4
		$this->assertTrue( $this->version1_2_3_acme_4->equals(new Version($this->version1_2_3_acme_4)));
		// 1.2.3-acme.4 < 2.2.3-acme.4
		$this->assertFalse($this->version1_2_3_acme_4->equals($this->version2_2_3_acme_4));
		// 1.2.3-acme.4 > 0.1.2-acme.3
		$this->assertFalse($this->version1_2_3_acme_4->equals($this->version0_1_2_acme_3));
		// 0.1.2-acme.3 < 1.2.3-acme.4
		$this->assertFalse($this->version0_1_2_acme_3->equals($this->version1_2_3_acme_4));
		// 2.3.4-acme.5 > 1.2.3-acme.4
		$this->assertFalse($this->version2_3_4_acme_5->equals($this->version1_2_3_acme_4));

		// compare extensions
		// 1.2.3-acme2.4 == 1.2.3-acme2.4
		$this->assertTrue( $this->version1_2_3_acme2_4->equals($this->version1_2_3_acme2_4));
		// 1.2.3-acme.4 < 1.2.3-acme2.4
		$this->assertFalse($this->version1_2_3_acme_4 ->equals($this->version1_2_3_acme2_4));
		// 1.2.3-acme2.4 > 1.2.3-acme.4
		$this->assertFalse($this->version1_2_3_acme2_4->equals($this->version1_2_3_acme_4));

		// compare different releases
		// 1.2.3-acme.4 > 1.2.3-acme.head.4 = 400
		$this->assertFalse($this->version1_2_3_acme_4->equals($this->version1_2_3_acme_head4));
		// 1.2.3-acme.4 > 1.2.3-acme.alpha.4 = 300
		$this->assertFalse($this->version1_2_3_acme_4->equals($this->version1_2_3_acme_alpha4));
		// 1.2.3-acme.4 > 1.2.3-acme.beta.4 = 200
		$this->assertFalse($this->version1_2_3_acme_4->equals($this->version1_2_3_acme_beta4));
		// 1.2.3-acme.4 > 1.2.3-acme.rc.4 = 100
		$this->assertFalse($this->version1_2_3_acme_4->equals($this->version1_2_3_acme_rc4));
		// 1.2.3-acme.4 == 1.2.3-acme.stable.4 = 0
		$this->assertTrue( $this->version1_2_3_acme_4->equals($this->version1_2_3_acme_stable4));

		// 1.2.3-acme.head.4 < 1.2.3-acme.4 = -400
		$this->assertFalse($this->version1_2_3_acme_head4  ->equals($this->version1_2_3_acme_4));
		// 1.2.3-acme.alpha.4 < 1.2.3-acme.4 = -300
		$this->assertFalse($this->version1_2_3_acme_alpha4 ->equals($this->version1_2_3_acme_4));
		// 1.2.3-acme.beta.4 < 1.2.3-acme.4 = -200
		$this->assertFalse($this->version1_2_3_acme_beta4  ->equals($this->version1_2_3_acme_4));
		// 1.2.3-acme.rc.4 < 1.2.3-acme.4 = -100
		$this->assertFalse($this->version1_2_3_acme_rc4    ->equals($this->version1_2_3_acme_4));
		// 1.2.3-acme.stable.4 == 1.2.3-acme.4 = 0
		$this->assertTrue( $this->version1_2_3_acme_stable4->equals($this->version1_2_3_acme_4));

		/*** Test with and without extension ******************************** */

		// incompatible versions
		// 1.2.3.4 != 1.2.3-acme.4
		try {
			$this->version1_2_3_4->equals($this->version1_2_3_acme_4);
			$this->assertTrue(false);
		} catch (IncompatibleVersionException $e) {
			$this->assertTrue(true);
		}
		// 1.2.3-acme.4 != 1.2.3.4
		try {
			$this->version1_2_3_acme_4->equals($this->version1_2_3_4);
			$this->assertTrue(false);
		} catch (IncompatibleVersionException $e) {
			$this->assertTrue(true);
		}
	}

	/**
	 * Test Version::isCompatible
	 */
	public function testIsCompatible()
	{
		/*** Test without extension ***************************************** */

		// 1.2.3.4 == 1.2.3.4
		$this->assertTrue($this->version1_2_3_4->isCompatible(new Version($this->version1_2_3_4)));
		// 1.2.3.4 < 2.2.3.4
		$this->assertTrue($this->version1_2_3_4->isCompatible($this->version2_2_3_4));
		// 1.2.3.4 > 0.1.2.3
		$this->assertTrue($this->version1_2_3_4->isCompatible($this->version0_1_2_3));

		// compare different releases
		// 1.2.3.4 > 1.2.3.head.4 = 400
		$this->assertTrue($this->version1_2_3_4->isCompatible($this->version1_2_3_head4));
		// 1.2.3.4 > 1.2.3.alpha.4 = 300
		$this->assertTrue($this->version1_2_3_4->isCompatible($this->version1_2_3_alpha4));
		// 1.2.3.4 > 1.2.3.beta.4 = 200
		$this->assertTrue($this->version1_2_3_4->isCompatible($this->version1_2_3_beta4));
		// 1.2.3.4 > 1.2.3.rc.4 = 100
		$this->assertTrue($this->version1_2_3_4->isCompatible($this->version1_2_3_rc4));
		// 1.2.3.4 == 1.2.3.stable.4 = 0
		$this->assertTrue($this->version1_2_3_4->isCompatible($this->version1_2_3_stable4));

		// 1.2.3.head.4 < 1.2.3.4 = -400
		$this->assertTrue($this->version1_2_3_head4  ->isCompatible($this->version1_2_3_4));
		// 1.2.3.alpha.4 < 1.2.3.4 = -300
		$this->assertTrue($this->version1_2_3_alpha4 ->isCompatible($this->version1_2_3_4));
		// 1.2.3.beta.4 < 1.2.3.4 = -200
		$this->assertTrue($this->version1_2_3_beta4  ->isCompatible($this->version1_2_3_4));
		// 1.2.3.rc.4 < 1.2.3.4 = -100
		$this->assertTrue($this->version1_2_3_rc4    ->isCompatible($this->version1_2_3_4));
		// 1.2.3.stable.4 == 1.2.3.4 = 0
		$this->assertTrue($this->version1_2_3_stable4->isCompatible($this->version1_2_3_4));

		/*** Test with extension ******************************************** */

		// 1.2.3-acme.4 == 1.2.3-acme.4
		$this->assertTrue($this->version1_2_3_acme_4->isCompatible(new Version($this->version1_2_3_acme_4)));
		// 1.2.3-acme.4 < 2.2.3-acme.4
		$this->assertTrue($this->version1_2_3_acme_4->isCompatible($this->version2_2_3_acme_4));
		// 1.2.3-acme.4 > 0.1.2-acme.3
		$this->assertTrue($this->version1_2_3_acme_4->isCompatible($this->version0_1_2_acme_3));
		// 0.1.2-acme.3 < 1.2.3-acme.4
		$this->assertTrue($this->version0_1_2_acme_3->isCompatible($this->version1_2_3_acme_4));
		// 2.3.4-acme.5 > 1.2.3-acme.4
		$this->assertTrue($this->version2_3_4_acme_5->isCompatible($this->version1_2_3_acme_4));

		// compare extensions
		// 1.2.3-acme2.4 == 1.2.3-acme2.4
		$this->assertTrue($this->version1_2_3_acme2_4->isCompatible($this->version1_2_3_acme2_4));
		// 1.2.3-acme.4 < 1.2.3-acme2.4
		$this->assertTrue($this->version1_2_3_acme_4 ->isCompatible($this->version1_2_3_acme2_4));
		// 1.2.3-acme2.4 > 1.2.3-acme.4
		$this->assertTrue($this->version1_2_3_acme2_4->isCompatible($this->version1_2_3_acme_4));

		// compare different releases
		// 1.2.3-acme.4 > 1.2.3-acme.head.4 = 400
		$this->assertTrue($this->version1_2_3_acme_4->isCompatible($this->version1_2_3_acme_head4));
		// 1.2.3-acme.4 > 1.2.3-acme.alpha.4 = 300
		$this->assertTrue($this->version1_2_3_acme_4->isCompatible($this->version1_2_3_acme_alpha4));
		// 1.2.3-acme.4 > 1.2.3-acme.beta.4 = 200
		$this->assertTrue($this->version1_2_3_acme_4->isCompatible($this->version1_2_3_acme_beta4));
		// 1.2.3-acme.4 > 1.2.3-acme.rc.4 = 100
		$this->assertTrue($this->version1_2_3_acme_4->isCompatible($this->version1_2_3_acme_rc4));
		// 1.2.3-acme.4 == 1.2.3-acme.stable.4 = 0
		$this->assertTrue($this->version1_2_3_acme_4->isCompatible($this->version1_2_3_acme_stable4));

		// 1.2.3-acme.head.4 < 1.2.3-acme.4 = -400
		$this->assertTrue($this->version1_2_3_acme_head4  ->isCompatible($this->version1_2_3_acme_4));
		// 1.2.3-acme.alpha.4 < 1.2.3-acme.4 = -300
		$this->assertTrue($this->version1_2_3_acme_alpha4 ->isCompatible($this->version1_2_3_acme_4));
		// 1.2.3-acme.beta.4 < 1.2.3-acme.4 = -200
		$this->assertTrue($this->version1_2_3_acme_beta4  ->isCompatible($this->version1_2_3_acme_4));
		// 1.2.3-acme.rc.4 < 1.2.3-acme.4 = -100
		$this->assertTrue($this->version1_2_3_acme_rc4    ->isCompatible($this->version1_2_3_acme_4));
		// 1.2.3-acme.stable.4 == 1.2.3-acme.4 = 0
		$this->assertTrue($this->version1_2_3_acme_stable4->isCompatible($this->version1_2_3_acme_4));

		/*** Test with and without extension ******************************** */

		// incompatible versions
		// 1.2.3.4 != 1.2.3-acme.4
		$this->assertFalse($this->version1_2_3_4->isCompatible($this->version1_2_3_acme_4));
		// 1.2.3-acme.4 != 1.2.3.4
		$this->assertFalse($this->version1_2_3_acme_4->isCompatible($this->version1_2_3_4));
	}

	/**
	 * @todo Implement testToString().
	 */
	public function testToString()
	{
		$this->assertEquals('0.1.2.3', $this->version0_1_2_3->toString());
		$this->assertEquals('1.2.3.4', $this->version1_2_3_4->toString());
		$this->assertEquals('2.3.4.5', $this->version2_3_4_5->toString());

		$this->assertEquals('1.2.3.head.4', $this->version1_2_3_head4->toString(false));
		$this->assertEquals('1.2.3.head.4', $this->version1_2_3_head4->toString(true));

		$this->assertEquals('1.2.3.alpha4', $this->version1_2_3_alpha4->toString(false));
		$this->assertEquals('1.2.3.alpha.4', $this->version1_2_3_alpha4->toString(true));

		$this->assertEquals('1.2.3.beta4', $this->version1_2_3_beta4->toString(false));
		$this->assertEquals('1.2.3.beta.4', $this->version1_2_3_beta4->toString(true));

		$this->assertEquals('1.2.3.rc4', $this->version1_2_3_rc4->toString(false));
		$this->assertEquals('1.2.3.rc.4', $this->version1_2_3_rc4->toString(true));

		$this->assertEquals('1.2.3.4', $this->version1_2_3_stable4->toString(false));
		$this->assertEquals('1.2.3.stable.4', $this->version1_2_3_stable4->toString(true));

		$this->assertEquals('0.1.2-acme.3', $this->version0_1_2_acme_3->toString(false));
		$this->assertEquals('1.2.3-acme.4', $this->version1_2_3_acme_4->toString(false));
		$this->assertEquals('2.3.4-acme.5', $this->version2_3_4_acme_5->toString(false));

		$this->assertEquals('0.1.2-acme1.stable.3', $this->version0_1_2_acme_3->toString(true));
		$this->assertEquals('1.2.3-acme1.stable.4', $this->version1_2_3_acme_4->toString(true));
		$this->assertEquals('2.3.4-acme1.stable.5', $this->version2_3_4_acme_5->toString(true));

		$this->assertEquals('1.2.3-acme2.4', $this->version1_2_3_acme2_4->toString(false));
		$this->assertEquals('1.2.3-acme2.stable.4', $this->version1_2_3_acme2_4->toString(true));

		$this->assertEquals('1.2.3-acme.head.4', $this->version1_2_3_acme_head4->toString(false));
		$this->assertEquals('1.2.3-acme1.head.4', $this->version1_2_3_acme_head4->toString(true));

		$this->assertEquals('1.2.3-acme.alpha4', $this->version1_2_3_acme_alpha4->toString(false));
		$this->assertEquals('1.2.3-acme1.alpha.4', $this->version1_2_3_acme_alpha4->toString(true));

		$this->assertEquals('1.2.3-acme.beta4', $this->version1_2_3_acme_beta4->toString(false));
		$this->assertEquals('1.2.3-acme1.beta.4', $this->version1_2_3_acme_beta4->toString(true));

		$this->assertEquals('1.2.3-acme.rc4', $this->version1_2_3_acme_rc4->toString(false));
		$this->assertEquals('1.2.3-acme1.rc.4', $this->version1_2_3_acme_rc4->toString(true));

		$this->assertEquals('1.2.3-acme.4', $this->version1_2_3_acme_stable4->toString(false));
		$this->assertEquals('1.2.3-acme1.stable.4', $this->version1_2_3_acme_stable4->toString(true));
	}

	/**
	 * Test Version::setX / Version::getX
	 */
	public function testSetterGetter()
	{
		$version = new Version();

		// check initial values
		$this->assertEquals(-1, $version->getMajor());
		$this->assertEquals(-1, $version->getMinor());
		$this->assertEquals(-1, $version->getRevision());
		$this->assertEquals(null, $version->getExtension());
		$this->assertEquals('stable', $version->getRelease());
		$this->assertEquals(null, $version->getBuild());

		// check incomplete exception
		try {
			$version->toString();
			$this->assertTrue(false);
		} catch (IncompleteVersionException $e) {
			$this->assertTrue(true);
		}

		// set all
		$version->setMajor(1);
		$version->setMinor(2);
		$version->setRevision(3);
		$version->setExtension('acme1');
		$version->setRelease('head');
		$version->setBuild(4);

		// check incomplete exception
		try {
			$version->toString();
			$this->assertTrue(true);
		} catch (IncompleteVersionException $e) {
			$this->assertTrue(false);
		}

		// check components
		$this->assertEquals(1, $version->getMajor());
		$this->assertEquals(2, $version->getMinor());
		$this->assertEquals(3, $version->getRevision());
		$this->assertEquals('acme1', $version->getExtension());
		$this->assertEquals('head', $version->getRelease());
		$this->assertEquals(4, $version->getBuild());

		// check extension setter
		try {
			// _ is an invalid char
			$version->setExtension('foo_bar123');
			$this->assertTrue(false);
		} catch (InvalidVersionExtensionException $e) {
			$this->assertTrue(true);
		}
	}
}
